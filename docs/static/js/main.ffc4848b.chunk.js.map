{"version":3,"sources":["KDScale.js","Graph.js","App.js","reportWebVitals.js","index.js"],"names":["KDScale","res","window","data","vals","i","length","aminoKey","hasOwnProperty","push","sum","j","x","Math","floor","y","console","log","Graph","props","height","width","title","this","xLabel","yLabel","graphData","Component","App","state","residueString","windowSize","radio","updateTextValue","bind","updateData","updateWindowSize","updateRadio","event","setState","target","value","calculate","className","FormControl","component","FormLabel","RadioGroup","aria-label","name","onChange","FormControlLabel","control","Radio","label","disabled","TextField","multiline","spellCheck","variant","type","Button","color","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffc4848b.chunk.js","sourcesContent":["import { ContinuousSizeLegend } from \"react-vis\";\n\nclass KDScale {\n    static aminoKey = {\n        \"I\": 4.5,\n        \"V\": 4.2,\n        \"L\": 3.8,\n        \"F\": 2.8,\n        \"C\": 2.5,\n        \"M\": 1.9,\n        \"A\": 1.8,\n        \"G\": -0.4,\n        \"T\": -0.7,\n        \"S\": -0.8,\n        \"W\": -0.9,\n        \"Y\": -1.3,\n        \"P\": -1.6,\n        \"H\": -3.2,\n        \"E\": -3.5,\n        \"Q\": -3.5,\n        \"D\": -3.5,\n        \"N\": -3.5,\n        \"K\": -3.9,\n        \"R\": -4.5, \n    }\n    \n    // calculate rolling averages, window: number, residues: string => [number]\n    static calculate(res, window) {\n        let data = [];\n        let vals = [];\n        for (let i = 0; i < res.length; i++) {\n            if (KDScale.aminoKey.hasOwnProperty(res[i])) {\n                vals.push(KDScale.aminoKey[res[i]]);\n            }\n        }\n        for (let i = 0; i < vals.length - window; i++) {\n            let sum = 0;\n            for (let j = 0; j < window; j++) {\n                sum += vals[i+j];\n            }\n            data.push(\n                {\n                    x: Math.floor(window / 2) + (window * i),\n                    y: sum \n                }\n                );\n        }\n        console.log(data);\n        return data; \n    }\n}\n\nexport default KDScale;","import { Component } from 'react';\nimport { XYPlot, LineSeries, XAxis, YAxis, VerticalGridLines, HorizontalGridLines } from 'react-vis';\n\nexport default class Graph extends Component {\n    constructor (props) {\n        super(props);\n    }\n    \n    render () {\n        return (\n            <div>\n                <XYPlot height={300} width={500}>\n                    <VerticalGridLines/>\n                    <HorizontalGridLines/>\n                    <XAxis title={this.props.xLabel}/>\n                    <YAxis title={this.props.yLabel}/>\n                    <LineSeries data={this.props.graphData}/>\n                </XYPlot>\n            </div>\n        ) \n    }\n}","import './App.css';\nimport { Component } from 'react';\nimport { Button, FormControl, FormControlLabel, FormLabel, Radio, RadioGroup } from '@material-ui/core';\nimport { TextField } from '@material-ui/core';\nimport KDScale from './KDScale';\nimport '../node_modules/react-vis/dist/style.css';\nimport Graph from './Graph';\n\nclass App extends Component {\n    constructor (props) {\n        super(props);\n        this.state = {\n            residueString: \"MLELLPTAVEGVSQAQITGRPEWIWLALGTALMGLGTLYFLVKGMGVSDPDAKKFYAITTLVPAIAFTMYLSMLLGYGLTMVPFGGEQNPIYWARYADWLFTTPLLLLDLALLVDADQGTILALVGADGIMIGTGLVGALTKVYSYRFVWWAISTAAMLYILYVLFFGFTSKAESMRPEVASTFKVLRNVTVVLWSAYPVVWLIGSEGAGIVPLNIETLLFMVLDVSAKVGFGLILLRSRAIFGEAEAPEPSAGDGAAATSD\",\n            graphData: [],\n            windowSize: 7,\n            radio: \"1\"\n        };\n        this.updateTextValue = this.updateTextValue.bind(this);\n        this.updateData = this.updateData.bind(this);\n        this.updateWindowSize = this.updateWindowSize.bind(this);\n        this.updateRadio = this.updateRadio.bind(this);\n    }\n    \n    updateTextValue (event) {\n        this.setState( { residueString: event.target.value } );\n    }\n\n    updateWindowSize (event) {\n        this.setState( { windowSize: event.target.value } );\n    }\n\n    updateData (event) {\n        this.setState( { graphData: KDScale.calculate(this.state.residueString, this.state.windowSize) } );\n    }\n\n    updateRadio (event) {\n        this.setState( { radio: event.target.value } );\n    }\n\n    render () {\n        return (\n            <div className=\"App\">\n                <h1>Protein Scale Graph Generator</h1>\n                <Graph graphData={this.state.graphData} xLabel = \"Residue\" yLabel = \"Hydrophobicity\" />\n                <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Scale</FormLabel>\n                    <RadioGroup aria-label=\"scale\" name=\"scale1\" onChange={ this.updateRadio } value={this.state.radio}>\n                        <FormControlLabel value=\"1\" control={<Radio />} label=\"K-D Hydrophobicity\" />\n                        <FormControlLabel value=\"2\" disabled control={<Radio />} label=\"Unimplemented\" />\n                        <FormControlLabel value=\"3\" disabled control={<Radio />} label=\"Unimplemented\" />\n                    </RadioGroup>\n                </FormControl>\n                <TextField\n                    value = { this.state.residueString }\n                    label = \"Enter 1-letter residue string\"\n                    multiline\n                    spellCheck={false}\n                    onChange = { this.updateTextValue }\n                    variant=\"outlined\"\n                    type=\"text\"\n                    />\n                <TextField\n                    value = { this.state.windowSize }\n                    label = \"Window size\"\n                    onChange = { this.updateWindowSize }\n                    type = \"number\"\n                    variant=\"outlined\"\n                    />\n                <Button\n                    variant = \"contained\"\n                    color = \"primary\"\n                    onClick = { this.updateData }\n                    >\n                    Generate Graph \n                </Button>\n            </div>\n        );\n    }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'fontsource-roboto';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}